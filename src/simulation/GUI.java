package simulation;import guichet.Guichet;import java.awt.*;import java.awt.event.*;import compte.Carte;import compte.Argent;     /** L'interface de la simulation du guichet  */class GUI extends Panel{       /** Constructor.     *     *  @param operatorPanel La simulation du panneau operateur     *  @param cardReader La simulation du lecteur de carte     *  @param display La simulation de l'ecran     *  @param keyboard La simulation du clavier     *  @param cashDispenser La simulation du distributeur d'argent     *  @param enveloppeAccpetor La simulation de la fente d'enveloppe     *  @param receiptPrinter La simulation de l'imprimeur de recu     */    GUI(SimPanneauOperation operatorPanel,        SimLecteurCarte cardReader,        SimEcran display,        SimClavier keyboard,        SimDistributeurArgent cashDispenser,        SimFenteEnveloppe envelopeAcceptor,        SimImprimeurRecu receiptPrinter)    {        setBackground(Color.lightGray);                //  L'interface est un panneau utilisant le card layout, avec quatre cards:        //        // - Une representant le guichet lui meme        // - Une simulant le dispositif permettant a un operateur de remplir le guichet de billets        // - Une simulant lamlecture de la bande magentique d'une carte guichet        // - Une affichant le journal interne        //        // Normallement, la card guichet est affichee.  Celle du remplissage de 'largent initiale        // est affichee au startup. Celle du lecteur de bande magnetique est affichee lorsque         // le client insere sa carte. La card du journal est affichee quand le client clique sur         // "Afficher Journal" et enlevee quand le client clique sur "Cacher Journal"                mainLayout = new CardLayout(5,5);        setLayout(mainLayout);                atmPanel = new PanneauGuichet(this,                                 operatorPanel, cardReader,                                 display, keyboard,                                cashDispenser, envelopeAcceptor, receiptPrinter);        this.add(atmPanel, "GUICHET");        billsPanel = new PanneauBillets();        add(billsPanel, "BILLETS");                cardPanel = new PanneauCarte();        add(cardPanel, "CARTE");        logPanel = new PanneauJournal(this);        add(logPanel, "JOURNAL");        mainLayout.show(this, "GUICHET");    }    /** Simule la recuperation du montant d'argent de l'operateur      *  dans le distributeur d'argent au startup     *     *  @return valuer en dollars des billets dans le distributeur (# of bills x $20)     */        public Argent getInitialCash()    {        mainLayout.show(this, "BILLETS");        int numberOfBills = billsPanel.readBills();        mainLayout.show(this, "GUICHET");                return new Argent(20 * numberOfBills);    }        /** Simule la lecture de carte     *     *     *  @return objet carte representant les information sur une carte client si lecture reussie,     *  null sinon     */    public Carte readCard()    {        mainLayout.show(this, "CARTE");        int cardNumber = cardPanel.readCardNumber();        mainLayout.show(this, "GUICHET");                if (cardNumber > 0)            return new Carte(cardNumber);        else            return null;    }        /** Simule l'impression d'une ligne du journal    *    *  @param text la ligne a imprimer    */    public void printLogLine(String text)    {        logPanel.println(text);    }        /** Affiche une carte specifique     *     *  @param cardName Le nom de la carte a montrer     */    void showCard(String cardName)    {        mainLayout.show(this, cardName);    }        /** Cree un objet GridBagConstraints avec les contrainte specifies, et      *  d'autres par defaut.     *     *  @param row la rangee (coordonnee y)     *  @param col la colonne (coordonnee x)     *  @param width la largeur     *  @param height la hauteur     *  @param fill le remplissage     *  @return un objet GridBagConstraints representant les contrintes ci-haut     */   static GridBagConstraints makeConstraints(                    int row, int col, int width, int height, int fill)    {         GridBagConstraints g = new GridBagConstraints();        g.gridy = row;        g.gridx = col;        g.gridheight = height;        g.gridwidth = width;        g.fill = fill;        g.insets = new Insets(2,2,2,2);        g.weightx = 1;        g.weighty = 1;        g.anchor = GridBagConstraints.CENTER;        return g;    }    /** Le card layout pour ce panneau     */    private CardLayout mainLayout;        /** Le panneau affichant le guichet lui-meme     */    private PanneauGuichet atmPanel;        /** Le panneau demandant a l'operateur de rentrer le nombre de billets      */    private PanneauBillets billsPanel;        /** Le panneau demandant au client de rentrer le numero de la carte     */    private PanneauCarte cardPanel;        /** Le panneau affichant le journal     */    private PanneauJournal logPanel;}    