package simulation;import java.awt.*;import java.awt.event.*;import java.util.StringTokenizer;/** Simule la partie ecran de la console client */class SimEcran extends Panel{    /** Constructor     */    SimEcran()    {        setLayout(new GridLayout(PanneauGuichet.DISPLAYABLE_LINES, 1));        setBackground(new Color(0, 96, 0));  // Dark green        setForeground(Color.white);                Font lineFont = new Font("Monospaced", Font.PLAIN, 14);        displayLine = new Label[PanneauGuichet.DISPLAYABLE_LINES];        for (int i = 0; i < PanneauGuichet.DISPLAYABLE_LINES; i ++)        {            displayLine[i] = new Label(PanneauGuichet.BLANK_DISPLAY_LINE);            displayLine[i].setFont(lineFont);            add(displayLine[i]);        }        currentDisplayLine = 0;            }        /** efface l'ecran     */    void clearDisplay()    {         for (int i = 0; i < displayLine.length; i ++)            displayLine[i].setText("");        currentDisplayLine = 0;    }          /** Ajoute du texte a l'ecran     *     *  @param text la texte a afficher     */    void display(String text)    {         StringTokenizer tokenizer = new StringTokenizer(text, "\n", false);        while (tokenizer.hasMoreTokens())        {             try            {                 displayLine[currentDisplayLine ++].setText(tokenizer.nextToken());             }            catch (Exception e)            { }        }    }        /** Met en place le texte a afficher     *     *  @param echo la ligne a etre affiche     */    void setEcho(String echo)    {        displayLine[currentDisplayLine].setText(            PanneauGuichet.BLANK_DISPLAY_LINE.substring(0,                 PanneauGuichet.BLANK_DISPLAY_LINE.length() / 2 - echo.length()) + echo);    }        /** Override la methode getInsets() pour donner plus d'espace     */    public Insets getInsets()    {        Insets insets = super.getInsets();        insets.top += 5;        insets.bottom += 5;        insets.left += 10;        insets.right += 10;        return insets;    }    /** lignes individuelles constituant l'ecran     */    private Label [] displayLine;        /** le numero de la ligne a ecrire     */    private int currentDisplayLine;}                                       