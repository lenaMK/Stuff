package simulation;import compte.InformationCompte;import compte.Balances;import compte.Carte;import compte.Message;import compte.Argent;import compte.Etat;/** Simulation de la banque, un ensemble de comptes simules est initialise au startup du system. */public class BanqueSimulee{    /** Simule la gestion des messages     *     *  @param message message a envoyer     *  @param balances (out) balances du compte client     *  @return code de l'etat retourne par la banque     */    public Etat handleMessage(Message message, Balances balances)    {               int cardNumber = message.getCard().getNumber();         if (cardNumber < 1 || cardNumber > PIN.length)            return new Failure("Carte invalide");            if (message.getPIN() != PIN [ cardNumber ] )            return new InvalidPIN();            switch(message.getMessageCode())        {            case Message.WITHDRAWAL:                            return withdrawal(message, balances);                                        case Message.INITIATE_DEPOSIT:                            return initiateDeposit(message);                        case Message.COMPLETE_DEPOSIT:                            return completeDeposit(message, balances);                        case Message.TRANSFER:                            return transfer(message, balances);                        case Message.INQUIRY:                            return inquiry(message, balances);        }                // Pour ne pas facher le compilateur                return null;    }    /** Simule la realisation d'un retrait     *     *  @param message le message decrivant la transaction de retrait     *  @param balances (out) balances du compte apres le retrait     *  @return code de l'etat derive des valeurs courantes     */    private Etat withdrawal(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Type de compte invalide");            Argent amount = message.getAmount();                Argent limitRemaining = new Argent(DAILY_WITHDRAWAL_LIMIT);        limitRemaining.subtract(WITHDRAWALS_TODAY[ cardNumber ]);        if (! amount.lessEqual(limitRemaining))            return new Failure("Limite de retrait quotidienne depasee");        if (! amount.lessEqual(AVAILABLE_BALANCE [ accountNumber ]))             return new Failure("Balance disponible insufisante");                    WITHDRAWALS_TODAY [ cardNumber ].add(amount);        BALANCE [ accountNumber ].subtract(amount);        AVAILABLE_BALANCE [ accountNumber ].subtract(amount);                // Retourne les balances mise a jour                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }         /** Simule l'initiation d'un depot. A ce point, la banque approuve seulement      * la validite du depot - Aucun changement n'est effectue avant l'insertion de l'enveloppe     *     *  @param message le message decrivant la transcation de depot     *  @return ode de l'etat derive des valeurs courantes     */    private Etat initiateDeposit(Message message)    {        int cardNumber = message.getCard().getNumber();             int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Type de compte invalide");                    // Don't update anything yet                    return new Success();    }            /** Simule la completion du depot     *     *  @param message le message decrivant la requete de depot     *  @param balances (out) balances (Mise a jours a la fin)     *  @return code de l'etat - Dans ce cas il doit toujours etre succes     */    private Etat completeDeposit(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                 int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Type de compte invalide");                    // Maintenant on peut mettre ajour les balances                Argent amount = message.getAmount();        BALANCE [ accountNumber ].add(amount);                // Retourne les balances mise a jour                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }            /** Simule la realisation d'un transfert     *     *  @param message le message decrivant la transaction de transfert     *  @param balances (out) balances du compte destination apres le transfert     *  @return code de l'etat derive des valeurs courantes     */    private Etat transfer(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();             int fromAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (fromAccountNumber == 0)            return new Failure("Type de compte invalide");            int toAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (toAccountNumber == 0)            return new Failure("Type de compte invalide");        if (fromAccountNumber == toAccountNumber)            return new Failure("On ne peut transferer vers\n" +                    "le compte lui-meme");            Argent amount = message.getAmount();                if (! amount.lessEqual(AVAILABLE_BALANCE [ fromAccountNumber ]))             return new Failure("Balance disponible insufisante");        // Mise a jour des balances apres que tout soit OK                    BALANCE [ fromAccountNumber ].subtract(amount);        AVAILABLE_BALANCE [ fromAccountNumber ].subtract(amount);        BALANCE [ toAccountNumber ].add(amount);        AVAILABLE_BALANCE [ toAccountNumber ].add(amount);                // Retourne les balances mise a jour                balances.setBalances(BALANCE [ toAccountNumber ],                              AVAILABLE_BALANCE [ toAccountNumber ]);                return new Success();    }         /** Simule la realisation d'un transfert    *    *  @param message le message decrivant la transaction de demande    *  @param balances (out) balances du compte    *  @return code de l'etat derive des valeurs courantes    */    private Etat inquiry(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();         int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Type de compte invalide");                // Retourne les balances mise a jour                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }         /** Representation des etats d'une transaction reussie     */    private static class Success extends Etat    {        public boolean isSuccess()        {            return true;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return null;        }    }        /** Representation des etats d'une transaction echouee (pour des raisons differentes de NIP invalide)     */    private static class Failure extends Etat    {        /** Constructor         *         *  @param message description de l'echec         */        public Failure(String message)        {            this.message = message;        }                public boolean isSuccess()        {            return false;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return message;        }                private String message;    }    /** Representation des etats d'une transaction echouee a cause de NIP invalide     */    private static class InvalidPIN extends Failure    {        /** Constructor         *         *  @param message description du message         */        public InvalidPIN()        {            super("NIP invalide");        }                public boolean isInvalidPIN()        {            return true;        }    }        /** NIP pour chaque carte.  (Les cartes vaildes commencent avec un 1)     */    private static final int PIN [] =    {         0,  // factice pour carte non-existante 0        42,         1234     };    /** Tableau de numeros de compte associes a chaque carte.	 *  Pour chauqe carte,  il y a trois differents types de compte, qui correpondent aux noms	 *  dans la calss AccountInformation.  0 siginfie pas de comptede ce type.   	 *  (Les cartes vaildes commencent avec un 1)     */    private static final int ACCOUNT_NUMBER [] [] =    {         { 0, 0, 0 },    // factice pour carte non-existante 0        { 1, 2, 0 },        { 1, 0, 3 }    };    /** Retraits fait aujourdhui sur cette carte. (Les cartes vaildes commencent avec un 1)     */     private static Argent WITHDRAWALS_TODAY [] =    {        new Argent(0),   // factice pour carte non-existante 0        new Argent(0),        new Argent(0)    };        /** Limite de retrait maximale de la carte.       */    private static final Argent DAILY_WITHDRAWAL_LIMIT = new Argent(300);        /** Balance de chaque compte (va changer pendant que le programme s'excute, donc pas un     *  static final).     */    private Argent BALANCE [] =    {        new Argent(0),    // factice pour carte non-existante 0        new Argent(100),         new Argent(1000),        new Argent(5000)     };         /** Balance disponible pour chaque compte (va changer pendant que le programme s'excute, donc pas un     *  static final).     */    private Argent AVAILABLE_BALANCE [] =    {         new Argent(0),    // factice pour carte non-existante         new Argent(100),         new Argent(1000),        new Argent(5000)     };}    