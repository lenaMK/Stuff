package guichet.transaction;import compte.Balances;import compte.Carte;import compte.Message;import compte.Recu;import compte.Etat;import guichet.Guichet;import guichet.Session;import guichet.physique.*;/** Abstract base class for classes representing the various kinds of *  transaction the ATM can perform */public abstract class Transaction{	/** Constructor    *    *  @param atm le guichet utilise pour communiquer avec le client    *  @param session la session dans laquelle la transaction est realisee    *  @param card la carte client    *  @param pin le NIP entre par le client    */         protected Transaction(Guichet atm, Session session, Carte card, int pin)    {        this.atm = atm;        this.session = session;        this.card = card;        this.pin = pin;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();                state = GETTING_SPECIFICS_STATE;    }             /** Cree une transaction du type approprie en demandant au client le type de transaction     *  desiree et retourne le membre nouvellement cree de la sous-classe approprie     *     *  @param atm le guichet utilise pour communiquer avec le client     *  @param session la session dans laquelle la transaction est realisee     *  @param card la carte client     *  @param pin le NIP entre par le client     *  @return un nouveau objet transaction du type approprie     *   @exception ConsoleClient.Cancelled si le client annule la transaction      *   aulieu de choisir une transaction      */    public static Transaction makeTransaction(Guichet atm, Session session,                                              Carte card, int pin)                                throws ConsoleClient.Cancelled                  {        int choice = atm.getCustomerConsole().readMenuChoice(                "Veuillez choisir un type de transaction", TRANSACTION_TYPES_MENU);                        switch(choice)        {            case 0:                            return new Retrait(atm, session, card, pin);                            case 1:                            return new Depot(atm, session, card, pin);                            case 2:                            return new Transfert(atm, session, card, pin);                            case 3:                            return new Demande(atm, session, card, pin);                            default:                            return null;    // Par ne pas facher le compilateur - n'est pas suppose arriver!        }    }        /** Realise une transaction. Cette methode depend des trois methodes abstraites ci-dessous     *  pour realiser les operations propres a chaque type de transaction de facon appropriee     *     *  @return true si le client desire effectuer une autre transaction;     *          false si le client ne desire pas faire une autre transaction      *  @exception CardRetained si la carte est retenu pour cause de trop d'essais de NIP invalide     */    public boolean performTransaction() throws CardRetained    {        String doAnotherMessage = "";        Etat status = null;        Recu receipt = null;                while (true)    // Termine par return dans ASKING_DO_ANOTHER_STATE ou une exception        {            switch(state)            {                case GETTING_SPECIFICS_STATE:                                    try                    {                                   message = getSpecificsFromCustomer();                        atm.getCustomerConsole().display("");                        state = SENDING_TO_BANK_STATE;                    }                    catch(ConsoleClient.Cancelled e)                    {                        doAnotherMessage = "Derniere transaction annulee";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case SENDING_TO_BANK_STATE:                                                    status = atm.getNetworkToBank().sendMessage(message, balances);                                    if (status.isInvalidPIN())                        state = INVALID_PIN_STATE;                    else if (status.isSuccess())                        state = COMPLETING_TRANSACTION_STATE;                    else                    {                        doAnotherMessage = status.getMessage();                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                case INVALID_PIN_STATE:                                    try                    {                        status = performInvalidPINExtension();                                            // Si le client rentre un NIP invalide a repetition,                         // CardRetained exception est lancee, et cette methode se termine                                                if (status.isSuccess())                            state = COMPLETING_TRANSACTION_STATE;                        else                        {                            doAnotherMessage = status.getMessage();                            state = ASKING_DO_ANOTHER_STATE;                        }                    }                    catch(ConsoleClient.Cancelled e)                    {                        doAnotherMessage = "Derniere transaction annulee";                        state = ASKING_DO_ANOTHER_STATE;                    }                    break;                                        case COMPLETING_TRANSACTION_STATE:                    try                    {                        receipt = completeTransaction();                        state = PRINTING_RECEIPT_STATE;                    }                    catch(ConsoleClient.Cancelled e)                    {                        doAnotherMessage = "Derniere transaction annulee";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case PRINTING_RECEIPT_STATE:                                    atm.getReceiptPrinter().printReceipt(receipt);                    state = ASKING_DO_ANOTHER_STATE;                                        break;                                    case ASKING_DO_ANOTHER_STATE:                                    if (doAnotherMessage.length() > 0)                        doAnotherMessage += "\n";                                            try                    {                        String [] yesNoMenu = { "Oui", "Non" };                        boolean doAgain = atm.getCustomerConsole().readMenuChoice(                            doAnotherMessage +                             "Voulez-vous effectuer une autre operation?",                            yesNoMenu) == 0;                        return doAgain;                    }                    catch(ConsoleClient.Cancelled e)                    {                        return false;                    }            }        }    }                /** Realise l'extension NIP Invalide - reinitialise NIP session a une nouvelle valeur en cas de succes     *     *  @return status code retourne par la banque de la plus recente re-soumission de transaction     *  @exception ConsoleClient.Cancelled si le client appuye sur ANNULER aulieu de re-entrer le NIP     *  @exception CardRetained Si la carte est retenue pour trop d'essai de NIP invalide     */    public Etat performInvalidPINExtension() throws ConsoleClient.Cancelled,                                                      CardRetained    {        Etat status = null;        for (int i = 0; i < 3; i ++)        {            pin = atm.getCustomerConsole().readPIN(                "NIP est invalide\nVeuillez re-taper votre NIP\n" +                "puis ENTRER");            atm.getCustomerConsole().display("");                        message.setPIN(pin);            status = atm.getNetworkToBank().sendMessage(message, balances);            if (! status.isInvalidPIN())            {                session.setPIN(pin);                return status;            }        }                atm.getCardReader().retainCard();        atm.getCustomerConsole().display(            "Votre carte est retenue\nVeuillez contactez la banque.");        try        {            Thread.sleep(5000);        }        catch(InterruptedException e)        { }        atm.getCustomerConsole().display("");                        throw new CardRetained();    }        /** Donne le numero de serie de cette transacion     *     *  @return numero de serie     */    public int getSerialNumber()    {        return serialNumber;    }        /** Recupere des details de la transaction avec le client  - chaque sous-classes      * doit l'implementer de facon appropriee.     *     *  @return message a la banque pour initier cette transaction      *  @exception ConsoleClient.Cancelled si le client annule la transaction     */    protected abstract Message getSpecificsFromCustomer() throws ConsoleClient.Cancelled;        /** Complete une transaction approuvee - chaque sous-classes      * doit l'implementer de facon appropriee.     *     *  @return recu a etre imprimer pour cette transaction     *  @exception ConsoleClient.Cancelled if customer cancelled this transaction     */    protected abstract Recu completeTransaction() throws ConsoleClient.Cancelled;                /** Exception lancee lorsque le client fait trop d'essais de NIP invalide     */    public static class CardRetained extends Exception    {        /** Constructor         */        public CardRetained()        {            super("Carte retenue, trop d'essais NIP invalide");        }    }            // Variables d'instances    /** le guichet utilise pour communiquer avec le client     */    protected Guichet atm;        /** la session dans laquelle la transaction est realisee     */    protected Session session;        /** la carte client     */    protected Carte card;        /** NIP entre ou re-tape par le client     */    protected int pin;        /** Numero de serie de la transaction     */    protected int serialNumber;        /** Message de la banque decrivant cette transaction     */    protected Message message;        /** Utilise pour retourne les balances du compte de la banque     */    protected Balances balances;        /** Liste des types de transactions disponibles a afficher comme menu     */    private static final String [] TRANSACTION_TYPES_MENU =         { "Retrait", "Depot", "Transfert", "Demande solde" };            /** Prochain numero de serie - utilise pour identifier de facon unique chaque transaction     */    private static int nextSerialNumber = 1;        /** l'etat courant de la transaction     */    private int state;        // Possible valeurs d'etat        /** Recuperer des details de la transaction avec le client     */    private static final int GETTING_SPECIFICS_STATE = 1;        /** Envoyer transaction a la banque     */    private static final int SENDING_TO_BANK_STATE = 2;        /** Realiser extension NIP Invalide     */    private static final int INVALID_PIN_STATE = 3;        /** Completer une transaction     */    private static final int COMPLETING_TRANSACTION_STATE = 4;        /** Imprimer Recu     */    private static final int PRINTING_RECEIPT_STATE = 5;        /** Demander si client desire effectuer une autre transaction     */    private static final int ASKING_DO_ANOTHER_STATE = 6;}