package guichet.physique;import compte.Argent;import compte.Etat;import simulation.Simulation;/** Manager de la console client.  Dans un vrai guichet, un composant physique est gere par la console, *  dans cette simulation; les classes du package simulation simule le composant physique. */ public class ConsoleClient{    /** Constructor     */    public ConsoleClient()    {    }        /** Affiche un message au client     *     *  @param message message a afficher     */    public void display(String message)    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(message);    }        /** Lit le NIP entre par le client (affiche des *)     *     *  @param prompt Le message a afficher  client pour q'il entre son NIP     *  @return Le NIP entre     *  @exception Cancelled si le client appuie sur ANNULER avant ENTRER     */    public int readPIN(String prompt) throws Cancelled    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(prompt);        Simulation.getInstance().display("");                String input = Simulation.getInstance().readInput(Simulation.PIN_MODE, 0);                Simulation.getInstance().clearDisplay();                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input);    }        /** Affiche un menu d'options et reourne le choix du client     *     *  @param prompt message affiche avant la liste d'options     *  @param menu les options     *  @return le nombre d'options choisies(0 .. # d'options - 1)     *  Note: les options sont numerotees 1 .. # d'options lors de l'affichage au client     *  - mais les indices du tbleau des options menu et le resultat final retourne     *  est dans le range 0 .. # d'options - 1     *     *  @exception Cancelled si le client appuie sur ANNULER avant de choisir une option     */    public synchronized int readMenuChoice(String prompt, String[] menu) throws Cancelled    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(prompt);        for (int i = 0; i < menu.length; i ++)            Simulation.getInstance().display((i+1) + ") " + menu[i]);        String input =             Simulation.getInstance().readInput(Simulation.MENU_MODE, menu.length);                    Simulation.getInstance().clearDisplay();                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input) - 1;    }        /** Lit le montant d'argent entre par le client     *     *  @param prompt message a afficher au client pour entrer le montant     *  @return le montant entrer par le client     *  @exception Cancelled si le client appuie sur ANNULER avant ENTRER     */    public synchronized Argent readAmount(String prompt) throws Cancelled    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(prompt);        Simulation.getInstance().display("");                String input = Simulation.getInstance().readInput(Simulation.AMOUNT_MODE, 0);                Simulation.getInstance().clearDisplay();                if (input == null)            throw new Cancelled();        else        {            int dollars = Integer.parseInt(input) / 100;            int cents = Integer.parseInt(input) % 100;            return new Argent(dollars, cents);        }    }        /** Exception lancee lorsque le slient appuie sur ANNULER alors que le guichet attend une action     */    public static class Cancelled extends Exception    {        /** Constructor         */        public Cancelled()        {            super("Annule par le client");        }    }}